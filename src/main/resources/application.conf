reader.output {
    port: "8080"
    port: ${?DRAGONS_HOARD_PORT}
}

persistence {
    mode: aws
    mode: ${?PERSISTENCE_MODE}
    bucket.name: "test-bucket"
    bucket.name: ${?PERSISTENCE_BUCKET_NAME}
    dir: "data"
    dir: ${?PERSISTENCE_DIR}
}

notification {
    kafka.topic: ${?NOTIFICATION_KAFKA_TOPIC}
    rest.urls: []
    rest.urls: ${?NOTIFICATION_REST_URLS}
}

postgres {
    driver.class: org.postgresql.Driver
    driver.class: ${?POSTGRES_DRIVER_CLASS}
    host: localhost
    host: ${?POSTGRES_HOST}
    port: 5432
    port: ${?POSTGRES_PORT}
    database: dart_db
    database: ${?POSTGRES_DB}
    user: dart
    user: ${?POSTGRES_USER}
    password: dart_pass
    password: ${?POSTGRES_PASSWORD}
    min.pool.size: ${?POSTGRES_MIN_POOL_SIZE}
    max.pool.size: ${?POSTGRES_MAX_POOL_SIZE}
    acquire.increment: ${?POSTGRES_ACQUIRE_INCREMENT}
    max.connections: ${?POSTGRES_MAX_CONNECTIONS}
}

arangodb {
    database: dart
    database: ${?ARANGODB_DATABASE}
    host: localhost
    host: ${?ARANGODB_HOST}
    port: 8529
    port: ${?ARANGODB_PORT}
}

aws {
    credentials.provider: TEST
    credentials.provider: ${?AWS_CREDENTIALS_PROVIDER}
    test {
        url: "http://localhost:8001"
        url: ${?AWS_TEST_URL}
        port: 8001
        port: ${?AWS_TEST_PORT}
        data.dir: "tmp/s3"
        data.dir: ${?AWS_TEST_DATA_DIR}
    }
}

kafka {
    application.id: "dragons-hoard"
    application.id: ${?KAFKA_APPLICATION_ID}
    key.serializer: "org.apache.kafka.common.serialization.StringSerializer"
    key.serializer: ${?KAFKA_KEY_SERIALIZER}
    key.deserializer: "org.apache.kafka.common.serialization.StringDeserializer"
    key.deserializer: ${?KAFKA_KEY_DESERIALIZER}
    value.serializer: "com.twosixlabs.dart.reader.output.services.notification.kafka.UploadResultsSerializer"
    value.serializer: ${?KAFKA_VALUE_SERIALIZER}
    value.deserializer: "com.twosixlabs.dart.reader.output.services.notification.kafka.UploadResultsDeserializer"
    value.deserializer: ${?KAFKA_VALUE_DESERIALIZER}
    bootstrap.servers: "kafka-broker-1:19092"
    bootstrap.services: ${?KAFKA_BOOTSTRAP_SERVERS}
}

file.stream.threshold.mb: 100
file.stream.threshold.mb: ${?FILE_STREAM_THRESHOLD_MB}

dart {
    auth {
        secret: ${?DART_AUTH_SECRET}
        bypass: true
        bypass: ${?DART_AUTH_BYPASS}
    }
}
